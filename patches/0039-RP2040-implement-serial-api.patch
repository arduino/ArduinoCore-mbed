From 332357990abbc13b3a81ce4269809d6ff9b87dca Mon Sep 17 00:00:00 2001
From: Martino Facchin <m.facchin@arduino.cc>
Date: Fri, 12 Feb 2021 15:49:55 +0100
Subject: [PATCH 39/87] RP2040: implement serial api

---
 .../TARGET_RP2040/PeripheralPins.c            |  85 +++++++
 .../TARGET_RP2040/PeripheralPins.h            |  72 ++++++
 .../TARGET_NANO_RP2040_CONNECT/PinNames.h     |   4 +
 .../TARGET_RP2040/gpio_api.c                  |   2 +-
 .../TARGET_RP2040/objects.h                   |  18 +-
 .../TARGET_RP2040/serial_api.c                | 214 ++++++++++++++++++
 targets/targets.json                          |   6 +-
 7 files changed, 392 insertions(+), 9 deletions(-)
 create mode 100644 targets/TARGET_RASPBERRYPI/TARGET_RP2040/PeripheralPins.c
 create mode 100644 targets/TARGET_RASPBERRYPI/TARGET_RP2040/PeripheralPins.h
 create mode 100644 targets/TARGET_RASPBERRYPI/TARGET_RP2040/serial_api.c

diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/PeripheralPins.c b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/PeripheralPins.c
new file mode 100644
index 0000000000..97a2acd261
--- /dev/null
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/PeripheralPins.c
@@ -0,0 +1,85 @@
+#include "pinmap.h"
+#include "objects.h"
+#include "PeripheralPins.h"
+
+const PinMap PinMap_FULL[] = {
+    {p0,  0, 0},
+    {p1,  0, 0},
+    {p2,  0, 0},
+    {p3,  0, 0},
+    {p4,  0, 0},
+    {p5,  0, 0},
+    {p6,  0, 0},
+    {p7,  0, 0},
+    {p8,  0, 0},
+    {p9,  0, 0},
+    {p10, 0, 0},
+    {p11, 0, 0},
+    {p12, 0, 0},
+    {p13, 0, 0},
+    {p14, 0, 0},
+    {p15, 0, 0},
+    {p16, 0, 0},
+    {p17, 0, 0},
+    {p18, 0, 0},
+    {p19, 0, 0},
+    {p20, 0, 0},
+    {p21, 0, 0},
+    {p22, 0, 0},
+    {p23, 0, 0},
+    {p24, 0, 0},
+    {p25, 0, 0},
+    {p26, 0, 0},
+    {p27, 0, 0},
+    {p28, 0, 0},
+    {p29, 0, 0},
+    {NC, NC, 0}
+};
+
+
+/************UART***************/
+const PinMap PinMap_UART_TX[] = {
+    {p0,  UART_0, (uint32_t) uart0},
+    {p4,  UART_1, (uint32_t) uart1},
+    {p8,  UART_1, (uint32_t) uart1},
+    {p12, UART_0, (uint32_t) uart0},
+    {p16, UART_0, (uint32_t) uart0},
+    {p20, UART_1, (uint32_t) uart1},
+    {p24, UART_1, (uint32_t) uart1},
+    {p28, UART_0, (uint32_t) uart0},
+    {NC, NC, 0}
+};
+
+const PinMap PinMap_UART_RX[] = {
+    {p1,  UART_0, (uint32_t) uart0},
+    {p5,  UART_1, (uint32_t) uart1},
+    {p9,  UART_1, (uint32_t) uart1},
+    {p13, UART_0, (uint32_t) uart0},
+    {p17, UART_0, (uint32_t) uart0},
+    {p21, UART_1, (uint32_t) uart1},
+    {p25, UART_1, (uint32_t) uart1},
+    {p29, UART_0, (uint32_t) uart0},
+    {NC, NC, 0}
+};
+
+const PinMap PinMap_UART_CTS[] = {
+    {p2,  UART_0, (uint32_t) uart0},
+    {p6,  UART_1, (uint32_t) uart1},
+    {p10, UART_1, (uint32_t) uart1},
+    {p14, UART_0, (uint32_t) uart0},
+    {p18, UART_0, (uint32_t) uart0},
+    {p22, UART_1, (uint32_t) uart1},
+    {p26, UART_1, (uint32_t) uart1},
+    {NC, NC, 0}
+};
+
+const PinMap PinMap_UART_RTS[] = {
+    {p3,  UART_0, (uint32_t) uart0},
+    {p7,  UART_1, (uint32_t) uart1},
+    {p11, UART_1, (uint32_t) uart1},
+    {p15, UART_0, (uint32_t) uart0},
+    {p19, UART_0, (uint32_t) uart0},
+    {p23, UART_1, (uint32_t) uart1},
+    {p27, UART_1, (uint32_t) uart1},
+    {NC, NC, 0}
+};
\ No newline at end of file
diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/PeripheralPins.h b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/PeripheralPins.h
new file mode 100644
index 0000000000..abeaed1d82
--- /dev/null
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/PeripheralPins.h
@@ -0,0 +1,72 @@
+/*
+ * mbed Microcontroller Library
+ * Copyright (c) 2017-2018 Future Electronics
+ * Copyright (c) 2018-2019 Cypress Semiconductor Corporation
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+// SPDX-License-Identifier: Apache-2.0
+#ifndef MBED_PERIPHERALPINS_H
+#define MBED_PERIPHERALPINS_H
+
+#include "PeripheralNames.h"
+
+//*** I2C ***
+#if DEVICE_I2C
+extern const PinMap PinMap_I2C_SDA[];
+extern const PinMap PinMap_I2C_SCL[];
+#endif
+
+//*** PWM ***
+#if DEVICE_PWMOUT
+extern const PinMap PinMap_PWM_OUT[];
+#endif
+
+//*** SERIAL ***
+#if DEVICE_SERIAL
+extern const PinMap PinMap_UART_TX[];
+extern const PinMap PinMap_UART_RX[];
+extern const PinMap PinMap_UART_RTS[];
+extern const PinMap PinMap_UART_CTS[];
+#endif
+
+//*** SPI ***
+#if DEVICE_SPI
+extern const PinMap PinMap_SPI_MOSI[];
+extern const PinMap PinMap_SPI_MISO[];
+extern const PinMap PinMap_SPI_SCLK[];
+extern const PinMap PinMap_SPI_SSEL[];
+#endif
+
+//*** ADC ***
+#if DEVICE_ANALOGIN
+extern const PinMap PinMap_ADC[];
+#endif
+
+//*** DAC ***
+#if DEVICE_ANALOGOUT
+extern const PinMap PinMap_DAC[];
+#endif
+
+//*** QSPI ***
+#if DEVICE_QSPI
+extern const PinMap PinMap_QSPI_SCLK[];
+extern const PinMap PinMap_QSPI_SSEL[];
+extern const PinMap PinMap_QSPI_DATA0[];
+extern const PinMap PinMap_QSPI_DATA1[];
+extern const PinMap PinMap_QSPI_DATA2[];
+extern const PinMap PinMap_QSPI_DATA3[];
+#endif
+
+#endif
diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/TARGET_NANO_RP2040_CONNECT/PinNames.h b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/TARGET_NANO_RP2040_CONNECT/PinNames.h
index 1590820a31..e84e89440c 100644
--- a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/TARGET_NANO_RP2040_CONNECT/PinNames.h
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/TARGET_NANO_RP2040_CONNECT/PinNames.h
@@ -35,6 +35,10 @@ typedef enum {
     p23 = 23,
     p24 = 24,
     p25 = 25,
+    p26 = 26,
+    p27 = 27,
+    p28 = 28,
+    p29 = 29,
 
     // ADC internal channels
     ADC_TEMP = 0xF0,
diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/gpio_api.c b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/gpio_api.c
index bdc1ab925d..7f6131c972 100644
--- a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/gpio_api.c
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/gpio_api.c
@@ -1,5 +1,5 @@
 #include "mbed_assert.h"
-#include "gpio_api.h"
+#include "hal/gpio_api.h"
 #include "pinmap.h"
 #include "mbed_error.h"
 
diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/objects.h b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/objects.h
index ad3cca07b0..7272492f2f 100644
--- a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/objects.h
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/objects.h
@@ -40,6 +40,7 @@ extern "C" {
 #include "hardware/spi.h"
 #include "hardware/i2c.h"
 #include "hardware/gpio.h"
+#include "hardware/irq.h"
 #include "hardware/regs/addressmap.h"
 #ifdef __cplusplus
 }
@@ -57,8 +58,6 @@ extern "C" {
 extern "C" {
 #endif
 
-typedef struct gpio_s gpio_t;
-
 struct gpio_s {
     PinName  pin;
     PinDirection  direction;
@@ -87,16 +86,20 @@ struct analogin_s {
 };
 
 struct serial_s {
-    uart_inst_t * const uart;
-    int index;
+    uart_inst_t * dev;
+    PinName pin_rx;
+    PinName pin_tx;
+    PinName pin_rts;
+    PinName pin_cts;
+    uint32_t baud;
 };
 
 struct i2c_s {
-    i2c_inst_t * const *i2c;
+    i2c_inst_t * dev;
 };
 
 struct spi_s {
-    spi_inst_t * const *spi;
+    spi_inst_t * dev;
 };
 
 struct flash_s {
@@ -104,6 +107,9 @@ struct flash_s {
 	uint32_t dummy;
 };
 
+typedef struct gpio_s gpio_t;
+typedef struct serial_s serial_t;
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/serial_api.c b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/serial_api.c
new file mode 100644
index 0000000000..6a90e64323
--- /dev/null
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/serial_api.c
@@ -0,0 +1,214 @@
+/* mbed Microcontroller Library
+ * Copyright (c) 2019, Arm Limited and affiliates.
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "hal/serial_api.h"
+#include "mbed_error.h"
+#include "PinNames.h"
+#include "PeripheralPins.h"
+#include <string.h>
+
+#if DEVICE_SERIAL
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+int stdio_uart_inited = 0;
+serial_t stdio_uart;
+
+void serial_init(serial_t *obj, PinName tx, PinName rx)
+{
+    if (tx == STDIO_UART_TX && stdio_uart_inited != 0) {
+        memmove(obj, &stdio_uart, sizeof(serial_t));
+        return;
+    }
+    memset(obj, 0, sizeof(serial_t));
+    struct serial_s *ser = obj;
+    ser->pin_tx = tx;
+    ser->pin_rx = rx;
+    ser->pin_rts = NC;
+    ser->pin_cts = NC;
+
+    UARTName dev_tx = (UARTName)pinmap_peripheral(tx, PinMap_UART_TX);
+    UARTName dev_rx = (UARTName)pinmap_peripheral(rx, PinMap_UART_RX);
+
+    if (dev_tx != dev_rx) {
+        MBED_ERROR(MBED_MAKE_ERROR(MBED_MODULE_DRIVER_SERIAL, MBED_ERROR_CODE_UNSUPPORTED), "Invalid serial pins");
+    }
+    if (dev_tx == UART_0) {
+        obj->dev = uart0;
+    } else {
+        obj->dev = uart1;
+    }
+
+    uart_init(obj->dev, MBED_CONF_PLATFORM_DEFAULT_SERIAL_BAUD_RATE);
+    gpio_set_function(tx, GPIO_FUNC_UART);
+    gpio_set_function(rx, GPIO_FUNC_UART);
+
+    //uart_set_translate_crlf(obj->dev, false);
+    uart_set_fifo_enabled(obj->dev, false);
+
+    if (tx == STDIO_UART_TX) {
+        memmove(&stdio_uart, obj, sizeof(serial_t));
+        stdio_uart_inited = 1;
+    }
+}
+
+void serial_free(serial_t *obj)
+{
+    uart_deinit(obj->dev);
+}
+
+void serial_baud(serial_t *obj, int baudrate)
+{
+    obj->baud = (uint32_t)baudrate;
+    uart_set_baudrate(obj->dev, obj->baud);
+}
+
+void serial_format(serial_t *obj, int data_bits, SerialParity parity, int stop_bits)
+{
+    uart_parity_t hal_parity;
+    switch (parity) {
+        case ParityNone:
+            hal_parity = UART_PARITY_NONE;
+            break;
+        case ParityOdd:
+            hal_parity = UART_PARITY_ODD;
+            break;
+        case ParityEven:
+            hal_parity = UART_PARITY_EVEN;
+            break;
+        default:
+            MBED_ERROR(MBED_MAKE_ERROR(MBED_MODULE_DRIVER_SERIAL, MBED_ERROR_CODE_UNSUPPORTED), "Unsupported parity");
+    }
+    uart_set_format(obj->dev, data_bits, stop_bits, hal_parity);
+}
+
+static volatile uart_irq_handler irq_handler;
+static volatile uint32_t serial_irq_ids[2] = {0};
+
+static inline void uart0_irq(void)
+{
+    irq_handler(serial_irq_ids[0], RxIrq);
+}
+
+static inline void uart1_irq(void)
+{
+    irq_handler(serial_irq_ids[1], RxIrq);
+}
+
+void serial_irq_handler(serial_t *obj, uart_irq_handler handler, uint32_t id)
+{
+    int UART_IRQ = obj->dev == uart0 ? UART0_IRQ : UART1_IRQ;
+    if (obj->dev == uart0) {
+        serial_irq_ids[0] = id;
+    } else {
+        serial_irq_ids[1] = id;
+    }
+    irq_handler = handler;
+}
+
+void serial_irq_set(serial_t *obj, SerialIrq irq, uint32_t enable)
+{
+    int UART_IRQ = obj->dev == uart0 ? UART0_IRQ : UART1_IRQ;
+
+    irq_set_exclusive_handler(UART_IRQ, obj->dev == uart0 ? uart0_irq : uart1_irq);
+    irq_set_enabled(UART_IRQ, enable);
+
+    uart_set_irq_enables(obj->dev, irq == RxIrq, irq == TxIrq);
+}
+
+int serial_getc(serial_t *obj)
+{
+    return uart_getc(obj->dev);
+}
+
+void serial_putc(serial_t *obj, int c)
+{
+    uart_putc_raw(obj->dev, c);
+}
+
+int serial_readable(serial_t *obj)
+{
+    return uart_is_readable(obj->dev);
+}
+
+int serial_writable(serial_t *obj)
+{
+    return uart_is_writable(obj->dev);
+}
+
+void serial_clear(serial_t *obj)
+{
+    MBED_WARNING(MBED_MAKE_ERROR(MBED_MODULE_DRIVER_SERIAL, MBED_ERROR_CODE_UNSUPPORTED), "serial_clear");
+}
+
+void serial_break_set(serial_t *obj)
+{
+    uart_set_break(obj->dev, true);
+}
+
+void serial_break_clear(serial_t *obj)
+{
+    uart_set_break(obj->dev, false);
+}
+
+void serial_pinout_tx(PinName tx)
+{
+    MBED_ERROR(MBED_MAKE_ERROR(MBED_MODULE_DRIVER_SERIAL, MBED_ERROR_CODE_UNSUPPORTED), "serial_pinout_tx");
+}
+
+void serial_set_flow_control(serial_t *obj, FlowControl type, PinName rxflow, PinName txflow)
+{
+    obj->pin_rts = rxflow;
+    obj->pin_cts = txflow;
+
+    if (obj->pin_rts != NC) {
+        gpio_set_function(obj->pin_rts, GPIO_FUNC_UART);
+    }
+    if (obj->pin_cts != NC) {
+        gpio_set_function(obj->pin_cts, GPIO_FUNC_UART);
+    }
+
+    if (type == FlowControlRTSCTS) {
+        uart_set_hw_flow(obj->dev, true, true);
+    } else {
+        uart_set_hw_flow(obj->dev, type == FlowControlCTS, type == FlowControlRTS);
+    }
+}
+
+const PinMap *serial_tx_pinmap(void)
+{
+    return PinMap_UART_TX;
+}
+
+const PinMap *serial_rx_pinmap(void)
+{
+    return PinMap_UART_RX;
+}
+
+const PinMap *serial_cts_pinmap(void)
+{
+    return PinMap_UART_CTS;
+}
+
+const PinMap *serial_rts_pinmap(void)
+{
+    return PinMap_UART_RTS;
+}
+
+#endif
\ No newline at end of file
diff --git a/targets/targets.json b/targets/targets.json
index 3d736e9e85..e7829207f3 100644
--- a/targets/targets.json
+++ b/targets/targets.json
@@ -8378,7 +8378,8 @@
         "device_has": [
             "ANALOGIN",
             "PORT_IN",
-            "PORT_OUT"
+            "PORT_OUT",
+            "SERIAL"
         ]
     },
     "NANO_RP2040_CONNECT": {
@@ -8387,7 +8388,8 @@
             "PICO_NO_BINARY_INFO=1",
             "MBED_MPU_CUSTOM",
             "PICO_TIME_DEFAULT_ALARM_POOL_DISABLED",
-            "PICO_ON_DEVICE=1"
+            "PICO_ON_DEVICE=1",
+            "PICO_UART_ENABLE_CRLF_SUPPORT=0"
         ]
     },
     "__build_tools_metadata__": {
-- 
2.30.2

