From b8f14228e6f824d75f0b2e771e5bf767bb540826 Mon Sep 17 00:00:00 2001
From: Paolo Calao <paolo.calao@gmail.com>
Date: Wed, 13 May 2020 11:59:46 +0200
Subject: [PATCH 22/87] Add AnalogIn configure function

This adds a weak method to configure AnalogIn objects.
Also, a strong implementation of such method for NRF5284 is provided.
---
 drivers/include/drivers/AnalogIn.h            | 11 ++++--
 drivers/source/AnalogIn.cpp                   |  7 ++++
 hal/include/hal/analogin_api.h                | 13 +++++++
 .../TARGET_NRF5x/TARGET_NRF52/analogin_api.c  | 34 +++++++++++++++++++
 .../TARGET_NRF5x/TARGET_NRF52/objects.h       | 14 ++++++++
 5 files changed, 76 insertions(+), 3 deletions(-)

diff --git a/drivers/include/drivers/AnalogIn.h b/drivers/include/drivers/AnalogIn.h
index dd5d067a2f..9cfd6600ca 100644
--- a/drivers/include/drivers/AnalogIn.h
+++ b/drivers/include/drivers/AnalogIn.h
@@ -88,6 +88,13 @@ public:
      */
     AnalogIn(PinName pin, float vref = MBED_CONF_TARGET_DEFAULT_ADC_VREF);
 
+
+    /** Reconfigure the adc object using the given configuration
+     *
+     * @param config reference to structure which holds AnalogIn configuration
+     */
+    void configure(const analogin_config_t &config);
+
     /** Read the input voltage, represented as a float in the range [0.0, 1.0]
      *
      * @returns A floating-point value representing the current input voltage, measured as a percentage
@@ -151,9 +158,7 @@ public:
 
     virtual ~AnalogIn()
     {
-        lock();
-        analogin_free(&_adc);
-        unlock();
+        // Do nothing
     }
 
 protected:
diff --git a/drivers/source/AnalogIn.cpp b/drivers/source/AnalogIn.cpp
index 596d034f19..f9e271d5d9 100644
--- a/drivers/source/AnalogIn.cpp
+++ b/drivers/source/AnalogIn.cpp
@@ -38,6 +38,13 @@ AnalogIn::AnalogIn(const PinMap &pinmap, float vref) : _vref(vref)
     unlock();
 }
 
+void AnalogIn::configure(const analogin_config_t &config)
+{
+    lock();
+    analogin_configure(&_adc, &config);
+    unlock();
+}
+
 float AnalogIn::read()
 {
     lock();
diff --git a/hal/include/hal/analogin_api.h b/hal/include/hal/analogin_api.h
index d172607c69..07208443f5 100644
--- a/hal/include/hal/analogin_api.h
+++ b/hal/include/hal/analogin_api.h
@@ -33,6 +33,10 @@ extern "C" {
  */
 typedef struct analogin_s analogin_t;
 
+/** Analogin configuration hal structure. analogin_config_s is declared in the target's hal
+ */
+typedef struct analogin_config_s analogin_config_t;
+
 /**
  * \defgroup hal_analogin Analogin hal functions
  *
@@ -77,6 +81,15 @@ void analogin_init_direct(analogin_t *obj, const PinMap *pinmap);
  */
 void analogin_init(analogin_t *obj, PinName pin);
 
+/** Initialize the analogin peripheral
+ *
+ * Configures the pin used by analogin.
+ * @param obj The analogin object to initialize
+ * @param pin The analogin pin name
+ * @param pinmap pointer to structure which holds analogin configuration
+ */
+void __attribute__((weak)) analogin_configure(analogin_t *obj, const analogin_config_t *config);
+
 /** Release the analogin peripheral
  *
  * Releases the pin used by analogin.
diff --git a/targets/TARGET_NORDIC/TARGET_NRF5x/TARGET_NRF52/analogin_api.c b/targets/TARGET_NORDIC/TARGET_NRF5x/TARGET_NRF52/analogin_api.c
index e66be66f50..863c7b090d 100644
--- a/targets/TARGET_NORDIC/TARGET_NRF5x/TARGET_NRF52/analogin_api.c
+++ b/targets/TARGET_NORDIC/TARGET_NRF5x/TARGET_NRF52/analogin_api.c
@@ -122,6 +122,40 @@ void analogin_init(analogin_t *obj, PinName pin)
     ANALOGIN_INIT_DIRECT(obj, &static_pinmap);
 }
 
+/** Reconfigure the analogin peripheral
+ *
+ * Configures the pin used by analogin.
+ * @param obj The analogin object to initialize
+ * @param config pointer to structure which holds analogin configuration
+ */
+void analogin_configure(analogin_t *obj, const analogin_config_t *config)
+{
+    MBED_ASSERT(obj);
+
+    /* Get associated channel from the adc object. */
+    uint32_t channel = obj->channel;
+    MBED_ASSERT(channel != (uint32_t) NC);
+
+    /* Account for an off-by-one in Channel definition and Input definition. */
+    nrf_saadc_input_t input = channel + 1;
+
+    /* Configure channel and pin */
+    nrf_saadc_channel_config_t channel_config = {
+    .resistor_p = config->resistor_p,
+    .resistor_n = config->resistor_n,
+    .gain       = config->gain,
+    .reference  = config->reference,
+    .acq_time   = config->acq_time,
+    .mode       = config->mode,
+    .burst      = config->burst,
+    .pin_p      = input,
+    .pin_n      = config->pin_n
+    };
+
+    ret_code_t result = nrfx_saadc_channel_init(channel, &channel_config);
+    MBED_ASSERT(result == NRFX_SUCCESS);
+}
+
 /** Read the input voltage, represented as a float in the range [0.0, 1.0]
  *
  * @param obj The analogin object
diff --git a/targets/TARGET_NORDIC/TARGET_NRF5x/TARGET_NRF52/objects.h b/targets/TARGET_NORDIC/TARGET_NRF5x/TARGET_NRF52/objects.h
index 41b87722ac..4466f680c7 100644
--- a/targets/TARGET_NORDIC/TARGET_NRF5x/TARGET_NRF52/objects.h
+++ b/targets/TARGET_NORDIC/TARGET_NRF5x/TARGET_NRF52/objects.h
@@ -50,6 +50,8 @@
 #endif
 #include "nrf_twi.h"
 
+#include "nrf_saadc.h"
+
 #include "nrf_pwm.h"
 
 #ifdef __cplusplus
@@ -148,6 +150,18 @@ struct analogin_s {
     uint8_t channel;
 };
 
+struct analogin_config_s {
+    nrf_saadc_resistor_t  resistor_p;
+    nrf_saadc_resistor_t  resistor_n;
+    nrf_saadc_gain_t      gain;
+    nrf_saadc_reference_t reference;
+    nrf_saadc_acqtime_t   acq_time;
+    nrf_saadc_mode_t      mode;
+    nrf_saadc_burst_t     burst;
+    nrf_saadc_input_t     pin_p;
+    nrf_saadc_input_t     pin_n;
+};
+
 struct gpio_irq_s {
     uint32_t ch;
 };
-- 
2.30.2

